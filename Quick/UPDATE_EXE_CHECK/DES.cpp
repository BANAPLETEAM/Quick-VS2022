

#include "stdafx.h"
#include "DES.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#pragma warning(disable: 4995)
#pragma warning(disable: 4311)
#pragma warning(disable: 4312)
#pragma warning(disable: 4018)
#pragma warning(disable: 4267)
#pragma warning(disable: 4244)
#pragma warning(disable: 4800)




#define KDDESEXTRA  6
#define EN0		0		/* MODE == encrypt */
#define	DE1		1		/* MODE == decrypt */
#define KEYSIZE 8
#define BLOCKSIZE 8


    /* P-box definition */
   static int bits1[] =
{ 0x00000004, 0x00000400, 0x00010000, 0x01000000};
   static int bits2[] =
{ 0x00008000, 0x80000000, 0x00000020, 0x00100000};
   static int bits3[] =
{ 0x08000000, 0x00000008, 0x00020000, 0x00000200};
   static int bits4[] =
{ 0x00000001, 0x00800000, 0x00002000, 0x00000080};
   static int bits5[] =
{ 0x40000000, 0x00000100, 0x00080000, 0x02000000};
   static int bits6[] =
{ 0x00004000, 0x00400000, 0x00000010, 0x20000000};
   static int bits7[] =
{ 0x04000000, 0x00000800, 0x00200000, 0x00000002};
   static int bits8[] =
{ 0x00001000, 0x00040000, 0x00000040, 0x10000000};

/* S-box definitions : classic DES*/
   static CHAR ds1[] = {
14, 4, 13, 1,2, 15, 11, 8, 3, 10, 6, 12, 5 ,9 ,0, 7,
0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13};

   static CHAR ds2[] = {
15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9};

static CHAR ds3[] = {
10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12};

   static CHAR ds4[] = {
7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14};

   static CHAR ds5[] = {
2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3};

   static CHAR ds6[] = {
12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13};

   static CHAR ds7[] = {
4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12};

   static CHAR ds8[] = {
13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11};


/* S-box definitions, s3' des */
   static CHAR s31[] = {
13, 14, 0, 3, 10, 4, 7, 9, 11, 8, 12, 6, 1, 15, 2, 5,
8, 2, 11, 13, 4, 1, 14, 7, 5, 15, 0, 3, 10, 6, 9, 12,
14, 9, 3, 10, 0, 7, 13, 4, 8, 5, 6, 15, 11, 12, 1, 2,
1, 4, 14, 7, 11, 13, 8, 2, 6, 3, 5, 10, 12, 0, 15, 9};

   static CHAR s32[] = {
15, 8, 3, 14, 4, 2, 9, 5, 0, 11, 10, 1, 13, 7, 6, 12,
6, 15, 9, 5, 3, 12, 10, 0, 13, 8, 4, 11, 14, 2, 1, 7,
9, 14, 5, 8, 2, 4, 15, 3, 10, 7, 6, 13, 1, 11, 12, 0,
10, 5, 3, 15, 12, 9, 0, 6, 1, 2, 8, 4, 11, 14, 7, 13};

   static CHAR s33[] = {
13, 3, 11, 5, 14, 8, 0, 6, 4, 15, 1, 12, 7, 2, 10, 9,
4, 13, 1, 8, 7, 2, 14, 11, 15, 10, 12, 3, 9, 5, 0, 6,
6, 5, 8, 11, 13, 14, 3, 0, 9, 2, 4, 1, 10, 7, 15, 12,
1, 11, 7, 2, 8, 13, 4, 14, 6, 12, 10, 15, 3, 0, 9, 5};

   static CHAR s34[] = {
9, 0, 7, 11, 12, 5, 10, 6, 15, 3, 1, 14, 2, 8, 4, 13,
5, 10, 12, 6, 0, 15, 3, 9, 8, 13, 11, 1, 7, 2, 14, 4,
10, 7, 9, 12, 5, 0, 6, 11, 3, 14, 4, 2, 8, 13, 15, 1,
3, 9, 15, 0, 6, 10, 5, 12, 14, 2, 1, 7, 13, 4, 8, 11};

   static CHAR s35[] = {
5, 15, 9, 10, 0, 3, 14, 4, 2, 12, 7, 1, 13, 6, 8, 11,
6, 9, 3, 15, 5, 12, 0, 10, 8, 7, 13, 4, 2, 11, 14, 1,
15, 0, 10, 9, 3, 5, 4, 14, 8, 11, 1, 7, 6, 12, 13, 2,
12, 5, 0, 6, 15, 10, 9, 3, 7, 2, 14, 11, 8, 1, 4, 13};

   static CHAR s36[] = {
4, 3, 7, 10, 9, 0, 14, 13, 15, 5, 12, 6, 2, 11, 1, 8,
14, 13, 11, 4, 2, 7, 1, 8, 9, 10, 5, 3, 15, 0, 12, 6,
13, 0, 10, 9, 4, 3, 7, 14, 1, 15, 6, 12, 8, 5, 11, 2,
1, 7, 4, 14, 11, 8, 13, 2, 10, 12, 3, 5, 6, 15, 0, 9};

   static CHAR s37[] = {
4, 10, 15, 12, 2, 9, 1, 6, 11, 5, 0, 3, 7, 14, 13, 8,
10, 15, 6, 0, 5, 3, 12, 9, 1, 8, 11, 13, 14, 4, 7, 2,
2, 12, 9, 6, 15, 10, 4, 1, 5, 11, 3, 0, 8, 7, 14, 13,
12, 6, 3, 9, 0, 5, 10, 15, 2, 13, 4, 14, 7, 11, 1, 8};

   static CHAR s38[] = {
13, 10, 0, 7, 3, 9, 14, 4, 2, 15, 12, 1, 5, 6, 11, 8,
2, 7, 13, 1, 4, 14, 11, 8, 15, 12, 6, 10, 9, 5, 0, 3,
4, 13, 14, 0, 9, 3, 7, 10, 1, 8, 2, 11, 15, 5, 12, 6,
8, 11, 7, 14, 2, 4, 13, 1, 6, 5, 9, 0, 12, 15, 3, 10};




static int precomp[][2][16] = {
{ {  /* 00 : 8000000000000000 */
 1,  3,  4,  7,  9, 10, 12, 17, 18, 20, 23, 25, 26, 30, -1, -1
}, {
0x00100000, 0x04000000, 0x00040000, 0x00010000, 0x10000000,
0x00020000, 0x04000000, 0x02000000, 0x00100000, 0x10000000,
0x08000000, 0x00020000, 0x08000000, 0x00010000, 0xFFFFFFFF } },
{ {  /* 01 : 4000000000000000 */
 1,  2,  4,  7,  8, 11, 12, 15, 16, 19, 22, 25, 26, 28, 31, -1
}, {
0x08000000, 0x20000000, 0x00080000, 0x01000000, 0x00010000,
0x04000000, 0x00040000, 0x00010000, 0x02000000, 0x00080000,
0x00200000, 0x02000000, 0x00100000, 0x10000000, 0x00200000 } },
{ {  /* 02 : 2000000000000000 */
 0,  5,  9, 10, 12, 15, 19, 20, 23, 24, 27, 30, -1, -1, -1, -1
}, {
0x00200000, 0x00040000, 0x00200000, 0x20000000, 0x00080000,
0x01000000, 0x00100000, 0x01000000, 0x20000000, 0x02000000,
0x00080000, 0x04000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 03 : 1000000000000000 */
 0,  4,  7,  9, 11, 12, 15, 16, 18, 20, 25, 26, 29, 30, -1, -1
}, {
0x00000100, 0x00001000, 0x00000008, 0x00000100, 0x00000020,
0x00000020, 0x00000010, 0x00002000, 0x00000008, 0x00000400,
0x00000200, 0x00000800, 0x00000002, 0x00000004, 0xFFFFFFFF } },
{ {  /* 04 : 0800000000000000 */
 1,  3,  5,  7,  8, 11, 13, 16, 21, 22, 25, 26, 28, 30, -1, -1
}, {
0x00000800, 0x00000008, 0x00000100, 0x00000020, 0x00000020,
0x00000010, 0x00001000, 0x00000400, 0x00000200, 0x00000800,
0x00000002, 0x00000100, 0x00000001, 0x00001000, 0xFFFFFFFF } },
{ {  /* 05 : 0400000000000000 */
 3,  5,  9, 10, 13, 15, 17, 18, 20, 23, 24, 26, 29, 30, -1, -1
}, {
0x00000010, 0x00001000, 0x00000004, 0x00000002, 0x00000001,
0x00002000, 0x00000002, 0x00000100, 0x00000001, 0x00000800,
0x00000010, 0x00000200, 0x00000400, 0x00000020, 0xFFFFFFFF } },
{ {  /* 06 : 0200000000000000 */
 2,  5,  7,  8, 12, 15, 16, 18, 21, 24, 26, 28, 31, -1, -1, -1
}, {
0x00000002, 0x00000001, 0x00002000, 0x00000004, 0x00001000,
0x00000008, 0x00000010, 0x00000200, 0x00000400, 0x00002000,
0x00000008, 0x00000400, 0x00000004, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 07 : 0080000000000000 */
 1,  2,  5,  6,  9, 12, 15, 17, 21, 22, 24, 27, 28, 31, -1, -1
}, {
0x04000000, 0x01000000, 0x20000000, 0x02000000, 0x00080000,
0x00200000, 0x02000000, 0x00040000, 0x00200000, 0x20000000,
0x00080000, 0x01000000, 0x00010000, 0x00100000, 0xFFFFFFFF } },
{ {  /* 08 : 0040000000000000 */
 0,  3,  4,  9, 10, 13, 14, 17, 18, 20, 25, 29, 31, -1, -1, -1
}, {
0x20000000, 0x00020000, 0x08000000, 0x00100000, 0x01000000,
0x20000000, 0x02000000, 0x10000000, 0x00020000, 0x04000000,
0x00040000, 0x00200000, 0x08000000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 09 : 0020000000000000 */
 3,  4,  6,  9, 11, 12, 16, 19, 20, 23, 25, 26, 28, 30, -1, -1
}, {
0x02000000, 0x00100000, 0x10000000, 0x08000000, 0x00020000,
0x08000000, 0x00010000, 0x04000000, 0x00040000, 0x00010000,
0x10000000, 0x00020000, 0x04000000, 0x00200000, 0xFFFFFFFF } },
{ {  /* 10 : 0010000000000000 */
 2,  5,  6,  8, 11, 14, 17, 21, 22, 25, 27, 28, 30, -1, -1, -1
}, {
0x00000001, 0x00000800, 0x00000010, 0x00000200, 0x00000400,
0x00002000, 0x00001000, 0x00000004, 0x00000002, 0x00000001,
0x00002000, 0x00000004, 0x00000100, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 11 : 0008000000000000 */
 1,  2,  4,  7, 10, 12, 14, 17, 18, 21, 23, 24, 28, 31, -1, -1
}, {
0x00000008, 0x00000010, 0x00000200, 0x00000400, 0x00002000,
0x00000008, 0x00000400, 0x00000004, 0x00000002, 0x00000001,
0x00002000, 0x00000004, 0x00001000, 0x00000800, 0xFFFFFFFF } },
{ {  /* 12 : 0004000000000000 */
 1,  2,  4,  6, 11, 12, 15, 16, 20, 23, 25, 27, 28, -1, -1, -1
}, {
0x00000010, 0x00002000, 0x00000008, 0x00000400, 0x00000200,
0x00000800, 0x00000002, 0x00000004, 0x00001000, 0x00000008,
0x00000100, 0x00000020, 0x00000020, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 13 : 0002000000000000 */
 0,  3,  4,  7,  8, 10, 13, 14, 17, 19, 20, 23, 25, 29, -1, -1
}, {
0x00000002, 0x00000200, 0x00000800, 0x00000002, 0x00000100,
0x00000001, 0x00000800, 0x00000010, 0x00000100, 0x00000020,
0x00000020, 0x00000010, 0x00001000, 0x00000004, 0xFFFFFFFF } },
{ {  /* 14 : 0000800000000000 */
 0,  2,  5,  7,  8, 10, 15, 16, 18, 21, 23, 24, 29, 31, -1, -1
}, {
0x01000000, 0x00040000, 0x00010000, 0x10000000, 0x00020000,
0x04000000, 0x00040000, 0x00100000, 0x10000000, 0x08000000,
0x00020000, 0x08000000, 0x00100000, 0x04000000, 0xFFFFFFFF } },
{ {  /* 15 : 0000400000000000 */
 1,  2,  5,  6,  9, 10, 13, 15, 17, 20, 23, 24, 26, 29, 30, -1
}, {
0x00020000, 0x00080000, 0x01000000, 0x00010000, 0x04000000,
0x00040000, 0x00010000, 0x10000000, 0x00080000, 0x00200000,
0x02000000, 0x00100000, 0x10000000, 0x08000000, 0x20000000 } },
{ {  /* 16 : 0000200000000000 */
 1,  3,  7,  8, 10, 13, 14, 17, 18, 21, 22, 25, 28, -1, -1, -1
}, {
0x02000000, 0x00040000, 0x00200000, 0x20000000, 0x00080000,
0x01000000, 0x00010000, 0x00100000, 0x01000000, 0x20000000,
0x02000000, 0x00080000, 0x00200000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 17 : 0000100000000000 */
 0,  2,  5,  7,  9, 10, 13, 15, 16, 18, 23, 24, 27, 28, -1, -1
}, {
0x00000001, 0x00001000, 0x00000008, 0x00000100, 0x00000020,
0x00000020, 0x00000010, 0x00001000, 0x00000008, 0x00000400,
0x00000200, 0x00000800, 0x00000002, 0x00000100, 0xFFFFFFFF } },
{ {  /* 18 : 0000080000000000 */
 0,  3,  5,  6,  9, 11, 15, 19, 20, 23, 24, 26, 29, 31, -1, -1
}, {
0x00000010, 0x00000100, 0x00000020, 0x00000020, 0x00000010,
0x00001000, 0x00000004, 0x00000200, 0x00000800, 0x00000002,
0x00000100, 0x00000001, 0x00000800, 0x00000008, 0xFFFFFFFF } },
{ {  /* 19 : 0000040000000000 */
 0,  3,  7,  8, 11, 13, 14, 16, 18, 21, 22, 24, 27, 31, -1, -1
}, {
0x00002000, 0x00001000, 0x00000004, 0x00000002, 0x00000001,
0x00002000, 0x00000004, 0x00000100, 0x00000001, 0x00000800,
0x00000010, 0x00000200, 0x00000400, 0x00000010, 0xFFFFFFFF } },
{ {  /* 20 : 0000020000000000 */
 1,  3,  5,  6, 10, 13, 15, 16, 19, 22, 24, 26, 30, -1, -1, -1
}, {
0x00000200, 0x00000001, 0x00002000, 0x00000004, 0x00001000,
0x00000008, 0x00000100, 0x00000200, 0x00000400, 0x00002000,
0x00000008, 0x00000400, 0x00000002, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 21 : 0000008000000000 */
 0,  3,  4,  7, 10, 13, 14, 19, 20, 22, 25, 26, 29, 30, -1, -1
}, {
0x00040000, 0x20000000, 0x02000000, 0x00080000, 0x00200000,
0x02000000, 0x00100000, 0x00200000, 0x20000000, 0x00080000,
0x01000000, 0x00010000, 0x04000000, 0x01000000, 0xFFFFFFFF } },
{ {  /* 22 : 0000004000000000 */
 0,  2,  7,  8, 11, 12, 15, 16, 18, 23, 27, 28, 31, -1, -1, -1
}, {
0x00080000, 0x08000000, 0x00100000, 0x01000000, 0x20000000,
0x02000000, 0x00080000, 0x00020000, 0x04000000, 0x00040000,
0x00200000, 0x20000000, 0x00020000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 23 : 0000002000000000 */
 1,  2,  4,  7,  9, 10, 15, 17, 18, 21, 23, 24, 26, 31, -1, -1
}, {
0x00040000, 0x00100000, 0x10000000, 0x08000000, 0x00020000,
0x08000000, 0x00100000, 0x04000000, 0x00040000, 0x00010000,
0x10000000, 0x00020000, 0x04000000, 0x02000000, 0xFFFFFFFF } },
{ {  /* 24 : 0000001000000000 */
 0,  3,  4,  6,  9, 12, 14, 19, 20, 23, 25, 26, 30, -1, -1, -1
}, {
0x00001000, 0x00000800, 0x00000010, 0x00000200, 0x00000400,
0x00002000, 0x00000008, 0x00000004, 0x00000002, 0x00000001,
0x00002000, 0x00000004, 0x00000001, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 25 : 0000000800000000 */
 1,  2,  5,  8, 10, 12, 16, 19, 21, 22, 26, 29, 30, -1, -1, -1
}, {
0x00000100, 0x00000200, 0x00000400, 0x00002000, 0x00000008,
0x00000400, 0x00000002, 0x00000001, 0x00002000, 0x00000004,
0x00001000, 0x00000008, 0x00000010, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 26 : 0000000400000000 */
 1,  2,  4,  9, 10, 13, 14, 18, 21, 23, 25, 26, 29, 30, -1, -1
}, {
0x00001000, 0x00000008, 0x00000400, 0x00000200, 0x00000800,
0x00000002, 0x00000100, 0x00001000, 0x00000008, 0x00000100,
0x00000020, 0x00000020, 0x00000010, 0x00002000, 0xFFFFFFFF } },
{ {  /* 27 : 0000000200000000 */
 1,  2,  5,  6,  8, 11, 12, 14, 17, 18, 21, 23, 27, 28, 31, -1
}, {
0x00000001, 0x00000800, 0x00000002, 0x00000100, 0x00000001,
0x00000800, 0x00000010, 0x00000200, 0x00000020, 0x00000020,
0x00000010, 0x00001000, 0x00000004, 0x00000002, 0x00000200 } },
{ {  /* 28 : 0000000080000000 */
 1,  3,  5,  6,  8, 13, 16, 19, 21, 22, 27, 28, 30, -1, -1, -1
}, {
0x20000000, 0x00010000, 0x10000000, 0x00020000, 0x04000000,
0x00040000, 0x10000000, 0x08000000, 0x00020000, 0x08000000,
0x00100000, 0x01000000, 0x00040000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 29 : 0000000040000000 */
 0,  3,  4,  7,  8, 11, 13, 14, 18, 21, 22, 24, 27, 29, 30, -1
}, {
0x08000000, 0x01000000, 0x00010000, 0x04000000, 0x00040000,
0x00010000, 0x10000000, 0x00020000, 0x00200000, 0x02000000,
0x00100000, 0x10000000, 0x08000000, 0x00020000, 0x00080000 } },
{ {  /* 30 : 0000000020000000 */
 0,  5,  6,  8, 11, 12, 15, 16, 19, 20, 23, 26, 29, 31, -1, -1
}, {
0x00100000, 0x00200000, 0x20000000, 0x00080000, 0x01000000,
0x00010000, 0x04000000, 0x01000000, 0x20000000, 0x02000000,
0x00080000, 0x00200000, 0x02000000, 0x00040000, 0xFFFFFFFF } },
{ {  /* 31 : 0000000010000000 */
 1,  2,  4,  9, 13, 14, 17, 18, 23, 24, 27, 28, 31, -1, -1, -1
}, {
0x00080000, 0x00020000, 0x04000000, 0x00040000, 0x00200000,
0x20000000, 0x00020000, 0x08000000, 0x00100000, 0x01000000,
0x20000000, 0x02000000, 0x10000000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 32 : 0000000008000000 */
 0,  3,  4,  7,  9, 13, 14, 17, 18, 21, 22, 24, 27, 28, 31, -1
}, {
0x00000200, 0x00000020, 0x00000020, 0x00000010, 0x00001000,
0x00000004, 0x00000002, 0x00000200, 0x00000800, 0x00000002,
0x00000100, 0x00000001, 0x00000800, 0x00000010, 0x00000100 } },
{ {  /* 33 : 0000000004000000 */
 0,  5,  6,  9, 11, 12, 16, 19, 20, 22, 25, 28, 31, -1, -1, -1
}, {
0x00000008, 0x00000004, 0x00000002, 0x00000001, 0x00002000,
0x00000004, 0x00000001, 0x00000800, 0x00000010, 0x00000200,
0x00000400, 0x00002000, 0x00001000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 34 : 0000000002000000 */
 0,  3,  4,  8, 11, 13, 15, 17, 20, 22, 24, 29, 31, -1, -1, -1
}, {
0x00000800, 0x00002000, 0x00000004, 0x00001000, 0x00000008,
0x00000100, 0x00000020, 0x00000400, 0x00002000, 0x00000008,
0x00000400, 0x00000200, 0x00000001, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 35 : 0000000000800000 */
 1,  2,  5,  8, 11, 12, 14, 17, 18, 20, 23, 24, 27, 28, 31, -1
}, {
0x00010000, 0x02000000, 0x00080000, 0x00200000, 0x02000000,
0x00100000, 0x10000000, 0x00200000, 0x20000000, 0x00080000,
0x01000000, 0x00010000, 0x04000000, 0x00040000, 0x20000000 } },
{ {  /* 36 : 0000000000400000 */
 1,  5,  6,  9, 10, 13, 16, 21, 25, 26, 28, 30, -1, -1, -1, -1
}, {
0x01000000, 0x00100000, 0x01000000, 0x20000000, 0x02000000,
0x00080000, 0x04000000, 0x00040000, 0x00200000, 0x20000000,
0x00080000, 0x08000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 37 : 0000000000200000 */
 2,  5,  7,  8, 13, 14, 16, 19, 21, 22, 24, 29, 30, -1, -1, -1
}, {
0x10000000, 0x08000000, 0x00020000, 0x08000000, 0x00100000,
0x01000000, 0x00040000, 0x00010000, 0x10000000, 0x00020000,
0x04000000, 0x00040000, 0x00100000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 38 : 0000000000100000 */
 0,  4,  7,  8, 10, 13, 15, 16, 19, 20, 23, 24, 27, 29, 31, -1
}, {
0x00020000, 0x00200000, 0x02000000, 0x00100000, 0x10000000,
0x08000000, 0x00020000, 0x00080000, 0x01000000, 0x00010000,
0x04000000, 0x00040000, 0x00010000, 0x10000000, 0x00080000 } },
{ {  /* 39 : 0000000000080000 */
 1,  3,  6,  8, 10, 15, 17, 19, 20, 24, 27, 29, 30, -1, -1, -1
}, {
0x00000020, 0x00000400, 0x00002000, 0x00000008, 0x00000400,
0x00000200, 0x00000001, 0x00002000, 0x00000004, 0x00001000,
0x00000008, 0x00000100, 0x00000200, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 40 : 0000000000040000 */
 2,  7,  8, 11, 12, 14, 16, 19, 21, 23, 24, 27, 29, 30, -1, -1
}, {
0x00000400, 0x00000200, 0x00000800, 0x00000002, 0x00000100,
0x00000001, 0x00001000, 0x00000008, 0x00000100, 0x00000020,
0x00000020, 0x00000010, 0x00001000, 0x00000008, 0xFFFFFFFF } },
{ {  /* 41 : 0000000000020000 */
 1,  3,  4,  6,  9, 10, 12, 15, 16, 19, 21, 25, 26, 29, 30, -1
}, {
0x00002000, 0x00000002, 0x00000100, 0x00000001, 0x00000800,
0x00000010, 0x00000200, 0x00000400, 0x00000020, 0x00000010,
0x00001000, 0x00000004, 0x00000002, 0x00000001, 0x00000800 } },
{ {  /* 42 : 0000000000008000 */
 0,  3,  4,  6, 11, 15, 17, 19, 20, 25, 26, 29, 31, -1, -1, -1
}, {
0x02000000, 0x10000000, 0x00020000, 0x04000000, 0x00040000,
0x00200000, 0x08000000, 0x00020000, 0x08000000, 0x00100000,
0x01000000, 0x20000000, 0x00010000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 43 : 0000000000004000 */
 2,  5,  6,  9, 11, 12, 14, 16, 19, 20, 22, 25, 27, 28, 31, -1
}, {
0x00010000, 0x04000000, 0x00040000, 0x00010000, 0x10000000,
0x00020000, 0x04000000, 0x00200000, 0x02000000, 0x00100000,
0x10000000, 0x08000000, 0x00020000, 0x08000000, 0x01000000 } },
{ {  /* 44 : 0000000000002000 */
 0,  3,  4,  6,  9, 10, 13, 14, 17, 18, 21, 24, 27, 28, -1, -1
}, {
0x10000000, 0x00200000, 0x20000000, 0x00080000, 0x01000000,
0x00010000, 0x04000000, 0x00040000, 0x20000000, 0x02000000,
0x00080000, 0x00200000, 0x02000000, 0x00100000, 0xFFFFFFFF } },
{ {  /* 45 : 0000000000001000 */
 2,  7, 11, 12, 14, 16, 21, 22, 25, 26, 29, 30, -1, -1, -1, -1
}, {
0x04000000, 0x00040000, 0x00200000, 0x20000000, 0x00080000,
0x08000000, 0x00100000, 0x01000000, 0x20000000, 0x02000000,
0x00080000, 0x00020000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 46 : 0000000000000800 */
 1,  2,  5,  7, 11, 12, 15, 16, 19, 20, 22, 25, 26, 28, 31, -1
}, {
0x00000400, 0x00000020, 0x00000010, 0x00001000, 0x00000004,
0x00000002, 0x00000001, 0x00000800, 0x00000002, 0x00000100,
0x00000001, 0x00000800, 0x00000010, 0x00000200, 0x00000020 } },
{ {  /* 47 : 0000000000000400 */
 0,  3,  4,  7,  9, 10, 14, 17, 18, 20, 23, 26, 28, -1, -1, -1
}, {
0x00000400, 0x00000004, 0x00000002, 0x00000001, 0x00002000,
0x00000004, 0x00001000, 0x00000800, 0x00000010, 0x00000200,
0x00000400, 0x00002000, 0x00000008, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 48 : 0000000000000200 */
 1,  2,  6,  9, 11, 13, 14, 18, 20, 22, 27, 28, 31, -1, -1, -1
}, {
0x00000002, 0x00000004, 0x00001000, 0x00000008, 0x00000100,
0x00000020, 0x00000020, 0x00002000, 0x00000008, 0x00000400,
0x00000200, 0x00000800, 0x00002000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 49 : 0000000000000080 */
 1,  3,  6,  9, 10, 12, 15, 16, 18, 21, 22, 25, 26, 29, 30, -1
}, {
0x10000000, 0x00080000, 0x00200000, 0x02000000, 0x00100000,
0x10000000, 0x08000000, 0x20000000, 0x00080000, 0x01000000,
0x00010000, 0x04000000, 0x00040000, 0x00010000, 0x02000000 } },
{ {  /* 50 : 0000000000000040 */
 0,  3,  4,  7,  8, 11, 14, 19, 23, 24, 26, 29, -1, -1, -1, -1
}, {
0x00010000, 0x00100000, 0x01000000, 0x20000000, 0x02000000,
0x00080000, 0x00200000, 0x00040000, 0x00200000, 0x20000000,
0x00080000, 0x01000000, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 51 : 0000000000000020 */
 1,  3,  5,  6, 11, 12, 15, 17, 19, 20, 22, 27, 30, -1, -1, -1
}, {
0x00200000, 0x08000000, 0x00020000, 0x08000000, 0x00100000,
0x01000000, 0x20000000, 0x00010000, 0x10000000, 0x00020000,
0x04000000, 0x00040000, 0x10000000, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 52 : 0000000000000010 */
 0,  2,  5,  6,  8, 11, 13, 14, 17, 18, 21, 22, 25, 27, 28, -1
}, {
0x04000000, 0x00200000, 0x02000000, 0x00100000, 0x10000000,
0x08000000, 0x00020000, 0x08000000, 0x01000000, 0x00010000,
0x04000000, 0x00040000, 0x00010000, 0x10000000, 0x00020000 } },
{ {  /* 53 : 0000000000000008 */
 0,  4,  6,  8, 13, 14, 17, 18, 22, 25, 27, 29, 31, -1, -1, -1
}, {
0x00000020, 0x00002000, 0x00000008, 0x00000400, 0x00000200,
0x00000800, 0x00002000, 0x00000004, 0x00001000, 0x00000008,
0x00000100, 0x00000020, 0x00000400, 0xFFFFFFFF, 0xFFFFFFFF } },
{ {  /* 54 : 0000000000000004 */
 1,  5,  6,  9, 10, 12, 15, 17, 19, 21, 22, 25, 27, 30, -1, -1
}, {
0x00000004, 0x00000200, 0x00000800, 0x00000002, 0x00000100,
0x00000001, 0x00000800, 0x00000008, 0x00000100, 0x00000020,
0x00000020, 0x00000010, 0x00001000, 0x00000400, 0xFFFFFFFF } },
{ {  /* 55 : 0000000000000002 */
 0,  2,  4,  7,  8, 10, 13, 17, 19, 23, 24, 27, 29, 31, -1, -1
}, {
0x00000004, 0x00000100, 0x00000001, 0x00000800, 0x00000010,
0x00000200, 0x00000400, 0x00000010, 0x00001000, 0x00000004,
0x00000002, 0x00000001, 0x00002000, 0x00000002, 0xFFFFFFFF } }
};


/* basic compounding of permutation and companding */
void CDES::spbox( CHAR *box, int *mask, int *compiled)
{
    int i;

    for(i=0; i<BOXLEN; i++)
    {
	    int entry = 0;
	    int spindex, j;

	    spindex = (i/2) + 16*(i%2) + ((i&32)>>1);

	    for(j=0; j<4; j++)
	    {
	        if(0!=(box[spindex] & (1<<j))) entry |= mask[j];
	    }

	    compiled[i] = entry;
    }
}

/* Set up SP boxes as per DES-classic*/
void CDES::initDesSPboxes()
{
    spbox(ds1, bits1, SP1);
    spbox(ds2, bits2, SP2);
    spbox(ds3, bits3, SP3);
    spbox(ds4, bits4, SP4);
    spbox(ds5, bits5, SP5);
    spbox(ds6, bits6, SP6);
    spbox(ds7, bits7, SP7);
    spbox(ds8, bits8, SP8);
}

/* Set up SP boxes as per the modified s3-DES in Schneier */
void CDES::inits3DesSPboxes()
{
    spbox(s31, bits1, SP1);
    spbox(s32, bits2, SP2);
    spbox(s33, bits3, SP3);
    spbox(s34, bits4, SP4);
    spbox(s35, bits5, SP5);
    spbox(s36, bits6, SP6);
    spbox(s37, bits7, SP7);
    spbox(s38, bits8, SP8);
}


/* Key dependency shuffling of SP box permutations */
void CDES::KDspbox(CHAR *box, int *mask, int *compiled,
    CHAR *key, int offset, int index)
{
    int i;

    int rowswap = key[0+offset] & (1 << index);
    int colswap = key[1+offset] & (1 << index);

    CHAR xor = (CHAR) (
	    ( (key[2]!=0 && (1 << index)!=0) ? 1 : 0) |
	    ( (key[3]!=0 && (1 << index)!=0) ? 2 : 0) |
	    ( (key[4]!=0 && (1 << index)!=0) ? 4 : 0) |
	    ( (key[5]!=0 && (1 << index)!=0) ? 8 : 0) );

    for(i=0; i<BOXLEN; i++)
    {
	    int entry = 0;
	    int spindex, j;
	    CHAR value;

	    spindex = (i/2) + 16*(i%2) + ((i&32)>>1);

	    if(rowswap!=0) spindex = (spindex+32) % 64;

	    if(colswap!=0)
	    {
	        int k = spindex/32;
	        spindex = (32*k) + ( ( (spindex-(32*k)) + 16 ) % 32 );
	    }

	    value = (CHAR)((xor ^ box[spindex]) & 0xF);

	    for(j=0; j<4; j++)
	    {
	        if(0!=(value & (1<<j))) entry |= mask[j];
	    }

	    compiled[i] = entry;
    }
}

/* S-box order for Key-dependent DES */
/*char scramble[8] =
{2, 4, 6, 7, 3, 1, 5, 8}; */

/* Set up Biham's key-dependent DES */

void CDES::initKDdesSPboxes(CHAR *key, int offset)
{
	KDspbox(ds2, bits1, SP1, key, offset, 0);
	KDspbox(ds4, bits2, SP2, key, offset, 1);
	KDspbox(ds6, bits3, SP3, key, offset, 2);
	KDspbox(ds7, bits4, SP4, key, offset, 3);
	KDspbox(ds3, bits5, SP5, key, offset, 4);
	KDspbox(ds1, bits6, SP6, key, offset, 5);
	KDspbox(ds5, bits7, SP7, key, offset, 6);
	KDspbox(ds8, bits8, SP8, key, offset, 7);
}

void CDES::DES_SPboxes()
{
    initDesSPboxes();
}


void CDES::key_single( CHAR *hexkey, int off1, int mode,
    int *keybuf, int offset )
{
    int bbidx = 0;
	int *bip;
	int *kip;
	int test;
	int idx;
    int i,j;

	int ep = offset+LONGS;
    int dp = offset;
	while( dp < ep ) {keybuf[dp++] = 0;}

	while( bbidx < 56)
    {
		test = (hexkey[off1++])&0xff;
		if( (test & 0x80) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x40) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x20) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x10) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x08) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x04) !=0 )
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
		if( (test & 0x02) != 0)
        {
			bip = precomp[bbidx][1];
			kip = precomp[bbidx][0];
            i=j=0;
			while( (idx = kip[i++]) >= 0 ) keybuf[idx+offset] |= bip[j++];
		}
		bbidx++;
        // only 7 bits out of each CHAR dor DES
	}

	/* swap 0.1 with 30.31, 2.3 with 28.29, etc */
	if( mode == DE1 )
    {
		int ccp = offset;//keybuf;
		dp = offset+30;//&keybuf[30];
		ep = offset+16;//&keybuf[16];
		while( ccp < ep )
        {
			test   = keybuf[dp];
			keybuf[dp]    = keybuf[ccp];
			keybuf[ccp++] = test;
			test   = keybuf[dp+1];
			keybuf[dp+1]  = keybuf[ccp];
			keybuf[ccp++] = test;
			dp    -= 2;
		}
	}

	return;
}

void CDES::key_dbl( CHAR *hexkey, int off1, int mode,
    int *keyout, int offset )
{
	int i;
	int revmod = ((mode == EN0) ? DE1 : EN0);
	key_single(hexkey, off1+KEYSIZE, revmod, keyout, offset+LONGS);
	key_single(hexkey, off1, mode, keyout, offset);
    for(i=0; i<LONGS; ++i)
    {
        keyout[offset+2*LONGS+i] = keyout[offset+i];
    }
	return;
}

void CDES::key_triple( CHAR *hexkey, int off1,
    int mode, int *keyout, int offset )
{
	int first=0;
    int third=2*KEYSIZE;
	int revmod;

	if( mode == EN0 )
    {
		revmod = DE1;
	}
	else
    {
		revmod = EN0;
		first = 2*KEYSIZE;
		third = 0;
	}
	key_single(hexkey, off1+first, mode, keyout, offset);
	key_single(hexkey, off1+KEYSIZE, revmod, keyout, offset+LONGS);
	key_single(hexkey, off1+third, mode, keyout, offset+2*LONGS);
	return;
}

void CDES::engine_single( CHAR *inblock, int offin,
        CHAR *outblock, int offout, int *keys)
{
	//DES_SPboxes key 
	UINT fval, work, right, leftt;
	UINT round;
    UINT s = 0;

	leftt	= ((inblock[0+offin]&0xFF) << 24)
			| ((inblock[1+offin]&0xFF) << 16)
			| ((inblock[2+offin]&0xFF) << 8)
			|  (inblock[3+offin]&0xFF);
	right	= ((inblock[4+offin]&0xFF) << 24)
			| ((inblock[5+offin]&0xFF) << 16)
			| ((inblock[6+offin]&0xFF) << 8)
			|  (inblock[7+offin]&0xFF);
	work = ((leftt >> 4) ^ right) & 0x0f0f0f0f;
	right ^= work;
	leftt ^= (work << 4);
	work = ((leftt >> 16) ^ right) & 0x0000ffff;
	right ^= work;
	leftt ^= (work << 16);
	work = ((right >> 2) ^ leftt) & 0x33333333;
	leftt ^= work;
	right ^= (work << 2);
	work = ((right >> 8) ^ leftt) & 0x00ff00ff;
	leftt ^= work;
	right ^= (work << 8);
	right = ((right << 1) | ((right >> 31) & 1)) & 0xffffffff;
	work = (leftt ^ right) & 0xaaaaaaaa;
	leftt ^= work;
	right ^= work;
	leftt = ((leftt << 1) | ((leftt >> 31) & 1)) & 0xffffffff;

	for( round = 0; round < 8; round++ )
    {
		work  = ((right << 28) | (right >> 4)) ^ keys[s++];
		fval  = SP7[( work		 & 0x3f)];
		fval |= SP5[((work >>  8) & 0x3f)];
		fval |= SP3[((work >> 16) & 0x3f)];
		fval |= SP1[((work >> 24) & 0x3f)];
		work  = right ^ keys[s++];
		fval |= SP8[( work		 & 0x3f)];
		fval |= SP6[((work >>  8) & 0x3f)];
		fval |= SP4[((work >> 16) & 0x3f)];
		fval |= SP2[((work >> 24) & 0x3f)];
		leftt ^= fval;
		work  = ((leftt << 28) | (leftt >> 4)) ^ keys[s++];
		fval  = SP7[( work		 & 0x3f)];
		fval |= SP5[((work >>  8) & 0x3f)];
		fval |= SP3[((work >> 16) & 0x3f)];
		fval |= SP1[((work >> 24) & 0x3f)];
		work  = leftt ^ keys[s++];
		fval |= SP8[( work		 & 0x3f)];
		fval |= SP6[((work >>  8) & 0x3f)];
		fval |= SP4[((work >> 16) & 0x3f)];
		fval |= SP2[((work >> 24) & 0x3f)];
		right ^= fval;
	}

	right = (right << 31) | (right >> 1);
	work = (leftt ^ right) & 0xaaaaaaaa;
	leftt ^= work;
	right ^= work;
	leftt = (leftt << 31) | (leftt >> 1);
	work = ((leftt >> 8) ^ right) & 0x00ff00ff;
	right ^= work;
	leftt ^= (work << 8);
	work = ((leftt >> 2) ^ right) & 0x33333333;
	right ^= work;
	leftt ^= (work << 2);
	work = ((right >> 16) ^ leftt) & 0x0000ffff;
	leftt ^= work;
	right ^= (work << 16);
	work = ((right >> 4) ^ leftt) & 0x0f0f0f0f;
	leftt ^= work;
	right ^= (work << 4);
	outblock[0+offout] = (CHAR)((right >> 24) & 0xFF);
	outblock[1+offout] = (CHAR)((right >> 16) & 0xFF);
	outblock[2+offout] = (CHAR)((right >>  8) & 0xFF);
	outblock[3+offout] = (CHAR)((right		 ) & 0xFF);
	outblock[4+offout] = (CHAR)((leftt >> 24) & 0xFF);
	outblock[5+offout] = (CHAR)((leftt >> 16) & 0xFF);
	outblock[6+offout] = (CHAR)((leftt >>  8) & 0xFF);
	outblock[7+offout] = (CHAR)((leftt		 ) & 0xFF);
	return;
}


void CDES::engine_triple( CHAR *inblock, int offin,
    CHAR *outblock, int offout, int *keys)
{
	//DES_SPboxes key 

	UINT fval, work, right, leftt;
	UINT round, iterate;
    UINT s = 0;

	leftt	= ((inblock[0+offin]&0xFF) << 24)
			| ((inblock[1+offin]&0xFF) << 16)
			| ((inblock[2+offin]&0xFF) << 8)
			|  (inblock[3+offin]&0xFF);
	right	= ((inblock[4+offin]&0xFF) << 24)
			| ((inblock[5+offin]&0xFF) << 16)
			| ((inblock[6+offin]&0xFF) << 8)
			|  (inblock[7+offin]&0xFF);
    work = ((leftt >> 4) ^ right) & 0x0f0f0f0f;
	right ^= work;
	leftt ^= (work << 4);
	work = ((leftt >> 16) ^ right) & 0x0000ffff;
	right ^= work;
	leftt ^= (work << 16);
	work = ((right >> 2) ^ leftt) & 0x33333333;
	leftt ^= work;
	right ^= (work << 2);
	work = ((right >> 8) ^ leftt) & 0x00ff00ff;
	leftt ^= work;
	right ^= (work << 8);
	right = ((right << 1) | ((right >> 31) & 1)) & 0xffffffff;
	work = (leftt ^ right) & 0xaaaaaaaa;
	leftt ^= work;
	right ^= work;
	leftt = ((leftt << 1) | ((leftt >> 31) & 1)) & 0xffffffff;

    // replace goto in 'C' original.
    iterate = 0;
    work = right;
	right = leftt;
	leftt = work;

	while( iterate < 3 )
    {
		work = right;
		right = leftt;
		leftt = work;
		++iterate;
		for( round = 0; round < 8; round++ )
        {
			work  = ((right << 28) | (right >> 4)) ^ keys[s++];
			fval  = SP7[( work		 & 0x3f)];
			fval |= SP5[((work >>  8) & 0x3f)];
			fval |= SP3[((work >> 16) & 0x3f)];
			fval |= SP1[((work >> 24) & 0x3f)];
			work  = right ^ keys[s++];
			fval |= SP8[( work		 & 0x3f)];
			fval |= SP6[((work >>  8) & 0x3f)];
			fval |= SP4[((work >> 16) & 0x3f)];
			fval |= SP2[((work >> 24) & 0x3f)];
			leftt ^= fval;
			work  = ((leftt << 28) | (leftt >> 4)) ^ keys[s++];
			fval  = SP7[( work		 & 0x3f)];
			fval |= SP5[((work >>  8) & 0x3f)];
			fval |= SP3[((work >> 16) & 0x3f)];
			fval |= SP1[((work >> 24) & 0x3f)];
			work  = leftt ^ keys[s++];
			fval |= SP8[( work		 & 0x3f)];
			fval |= SP6[((work >>  8) & 0x3f)];
			fval |= SP4[((work >> 16) & 0x3f)];
			fval |= SP2[((work >> 24) & 0x3f)];
			right ^= fval;
		}
	}

	right = (right << 31) | (right >> 1);
	work = (leftt ^ right) & 0xaaaaaaaa;
	leftt ^= work;
	right ^= work;
	leftt = (leftt << 31) | (leftt >> 1);
	work = ((leftt >> 8) ^ right) & 0x00ff00ff;
	right ^= work;
	leftt ^= (work << 8);
	work = ((leftt >> 2) ^ right) & 0x33333333;
	right ^= work;
	leftt ^= (work << 2);
	work = ((right >> 16) ^ leftt) & 0x0000ffff;
	leftt ^= work;
	right ^= (work << 16);
	work = ((right >> 4) ^ leftt) & 0x0f0f0f0f;
	leftt ^= work;
	right ^= (work << 4);
	outblock[0+offout] = (CHAR)((right >> 24) & 0xFF);
	outblock[1+offout] = (CHAR)((right >> 16) & 0xFF);
	outblock[2+offout] = (CHAR)((right >>  8) & 0xFF);
	outblock[3+offout] = (CHAR)((right		 ) & 0xFF);
	outblock[4+offout] = (CHAR)((leftt >> 24) & 0xFF);
	outblock[5+offout] = (CHAR)((leftt >> 16) & 0xFF);
	outblock[6+offout] = (CHAR)((leftt >>  8) & 0xFF);
	outblock[7+offout] = (CHAR)((leftt		 ) & 0xFF);
	return;
}

void CDES::Init(CHAR *key, int offset, BOOL triple)
{
	memset(ekeysched, 0x00, LONGS);
	memset(dkeysched, 0x00, LONGS);
    key_single(key, offset, EN0, ekeysched, 0);
    key_single(key, offset, DE1, dkeysched, 0);
	initDesSPboxes();
}

void CDES::Ecb(BOOL encrypt, CHAR *in, int offin, CHAR *out, int offout)
{
    if(encrypt)
    {
        engine_single(in, offin, out, offout, ekeysched);
    }
    else
    {
        engine_single(in, offin, out, offout, dkeysched);
    }
}

